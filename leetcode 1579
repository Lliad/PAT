class Solution {
 static   bool com(vector<int> v1, vector<int> v2) {
	return v1[0] > v2[0];
}
int findRoot(int x, vector<int> parent) {
	int xRoot = x;
	while (parent[xRoot] != -1) {
		xRoot = parent[xRoot];
	}
	return xRoot;
}

int merge(int x, int y, vector<int> &parent, vector<int> &rank) {
	int xRoot = findRoot(x, parent);
	int yRoot = findRoot(y, parent);
	if (xRoot == yRoot) {
		return 0;
	}
	else {
		if (rank[yRoot] > rank[xRoot]) {
			parent[xRoot] = yRoot;
			return 1;
		}
		else if (rank[yRoot] < rank[xRoot]) {
			parent[yRoot] = xRoot;
			return 1;
		}
		else {
			parent[xRoot] = yRoot;
			++rank[yRoot];
			return 1;
		}
	}
}

public:

int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {
	vector<int> parentForA(n + 1, -1);
	vector<int> parentForB(n + 1, -1);
	vector<int> rankForA(n + 1, 1);
	vector<int> rankForB(n + 1, 1);
	int cnt = 0;
	int edgeA = 0;
	int edgeB = 0;
	int flagA = 0;
	int flagB = 0;

	if (n - 1 > edges.size()) {
		return -1;
	}

    sort(edges.begin(), edges.end(), com);

	for (auto i = 0; i != edges.size(); ++i) {
		if (edges[i][0] == 1) {
			++edgeA;
			if (merge(edges[i][1], edges[i][2], parentForA, rankForA) == 0) {
				++cnt;
			}
		}
		if (edges[i][0] == 2) {
			++edgeB;
			if (merge(edges[i][1], edges[i][2], parentForB, rankForB) == 0) {
				++cnt;
			}
		}
		if (edges[i][0] == 3) {
			++edgeA;
			++edgeB;
			flagA = merge(edges[i][1], edges[i][2], parentForA, rankForA);
			flagB = merge(edges[i][1], edges[i][2], parentForB, rankForB);
			if (flagA == 0 && flagB == 0) {
				++cnt;
			}
		}
	}
	flagA = 0;
	flagB = 0;
	if ((n - 1 > edgeA) || (n - 1 > edgeB)) {
		return -1;
	}
	for (auto i = 1; i != n + 1; ++i) {
		if (parentForA[i] == -1) {
			++flagA;
		}
		if (parentForB[i] == -1) {
			++flagB;
		}

		if (flagA > 1 || flagB > 1) {
			return -1;
		}
	}
	return cnt;
}
};

https://leetcode-cn.com/problems/remove-max-number-of-edges-to-keep-graph-fully-traversable/submissions/
