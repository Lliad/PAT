#include <iostream>
#include <string>
#include <vector>
#include <algorithm>//sort
#include <cmath>

using namespace std;

#define MAX_RADIX 1000

int charToNum(const char& ch);
long long toDecimal(const string& strVal, const long long& radix);
int findRadix(const string& strVal, const long long& decVal);
bool compare(char ch1, char ch2);


int main(int argc, char* argv[])
{
#if 1
    long long tag, radix;
    string strVal1, strVal2;
    cin >> strVal1 >> strVal2 >> tag >> radix;

    int finRadix = 0;
    if (tag == 1)
    {
        finRadix = findRadix(strVal2, toDecimal(strVal1, radix));
    }
    if (tag == 2)
    {
        finRadix = findRadix(strVal1, toDecimal(strVal2, radix));
    }

    if (finRadix)
    {
        cout << finRadix;
    }
    else
    {
        cout << "Impossible";
    }
#endif

    return 0;
}

int charToNum(const char& ch)
{
    if (ch >= '0' && ch <= '9')
    {
        return ch - '0';
    }
    else
    {
        return ch - 'a' + 10;
    }
}

long long toDecimal(const string& strVal, const long long& radix)//任意进制转化为10进制
{
    long long decVal = 0;
    for (auto i = 0; i != strVal.size(); ++i)
    {
        decVal += charToNum(strVal[i]) * powl(radix, strVal.size() - 1 - i);
    }
    return decVal;
}

bool compare(char ch1, char ch2)
{
    return ch1 > ch2;
}

int findRadix(const string& strVal, const long long& decVal)
{
    string str = strVal;
    sort(str.begin(), str.end(), compare);

    for (int i = charToNum(str[0]) + 1; i != MAX_RADIX; ++i)
    {
        if (decVal == toDecimal(strVal, i))
        {
            return i;
        }
    }
    return 0;
}
